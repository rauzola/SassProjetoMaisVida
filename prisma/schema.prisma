// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id                        String   @id @default(cuid())
  status                    String   @default("ativo") // 'ativo', 'inativo'
  nome                      String
  email                     String   @unique
  cpf                       String   @unique
  password                  String
  data_nascimento           DateTime
  estado_civil              String
  profissao                 String
  telefone_contato          String
  contato_emergencia        String
  telefone_contato_emergencia String
  tamanho_camiseta          String
  tipo_usuario              String   @default("campista") // 'campista', 'equipe', 'admin'
  data_criacao              DateTime @default(now())
  Saude                     Saude?
  Inscricoes                Inscricao[]
  Sessions                  Sessions[]
  ComunidadeId              Int?
  Comunidade                Comunidade? @relation(fields: [ComunidadeId], references: [id])
}

model Comunidade {
  id            Int      @id @default(autoincrement())
  nome          String
  dataAcampa1   DateTime?
  nomeAcampa2   String?
  dataAcampa2   DateTime?
  dataEnvio     DateTime?
  assessores    String   // Nomes dos assessores
  Membros       User[]   // Relacionamento com usuários (não precisa do @relation)
}

model Saude {
  id                    Int     @id @default(autoincrement())
  userId                String  @unique
  portadorDoenca        Boolean @default(false)
  doencas               String?
  alergias              Boolean @default(false)
  alergiasDetalhe       String?
  medicacao             Boolean @default(false)
  medicamentos          String?
  planoSaude            Boolean @default(false)
  operadoraPlano        String?
  numeroInscricaoPlano  String?
  User                  User    @relation(fields: [userId], references: [id])
}

model Evento {
  id          Int      @id @default(autoincrement())
  nome        String
  descricao   String
  dataInicio  DateTime
  horaInicio  DateTime
  horaFim     DateTime
  local       String
  status      String   @default("aberto") // 'aberto', 'fechado', 'finalizado'
  Inscricoes  Inscricao[]
}

model Inscricao {
  id         Int      @id @default(autoincrement())
  userId     String
  eventoId   Int
  status     String   @default("pendente") // 'pendente', 'confirmada', 'cancelada'
  dataInscricao DateTime @default(now())
  User       User    @relation(fields: [userId], references: [id])
  Evento     Evento  @relation(fields: [eventoId], references: [id])
  Presencas  Presenca[]
}

model Presenca {
  id           Int      @id @default(autoincrement())
  inscricaoId  Int
  dataPresenca DateTime @default(now())
  status       String   @default("ausente") // 'presente', 'ausente'
  Inscricao    Inscricao @relation(fields: [inscricaoId], references: [id])
}

model Sessions {
  id        String   @id @default(cuid())
  userId    String
  token     String
  expiresAt DateTime
  valid     Boolean
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}
